{"version":3,"sources":["helpers/DirectionToGo/index.ts","helpers/config/gameSettings.ts","helpers/context/GameContext/context.tsx","helpers/context/index.tsx","components/PlayArea/styles.ts","components/Square/styles.ts","components/Square/index.tsx","components/Fruit/index.tsx","components/Snake/index.tsx","components/PlayArea/index.tsx","components/Header/styles.ts","components/Header/index.tsx","components/template/Game/styles.ts","components/StartOrReplay/style.ts","components/StartOrReplay/index.tsx","components/MobileControls/styles.ts","components/MobileControls/index.tsx","components/template/Game/index.tsx","App.tsx","index.tsx"],"names":["DirectionToGo","GAME_SETTINGS","gameResolution","width","height","squareArea","speed","initial","minSpeed","speedDecay","createInitalSnake","top","Math","floor","left","snake","i","push","getRandomPosition","getRandomInt","min","max","random","DEFAULT_VALUE","state","fruit","pontuation","moveDirection","RIGHT","setState","start","changeDirection","newDirection","isGameOver","msgStart","GameContext","createContext","GameContextProvider","children","playingField","useRef","useState","currentIntervalId","setCurrentIntervalId","isStart","setIsStart","speedSeconds","setSpeedSeconds","gameOver","undefined","clearInterval","moveSnake","removeLastNode","newSnake","currentSnakeHead","length","shift","LEFT","TOP","BOTTOM","verifyColision","checkSnakeCollidedWithBorders","filter","item","checkSnakeCollidedWithItself","toEatFruit","changeSpeed","useEffect","intervalId","setInterval","verifyFruit","JSON","stringify","Provider","value","current","focus","GlobalContext","PlayAreaContainer","styled","section","SquareDesign","div","Square","style","Fruit","useContext","background","borderRadius","Snake","map","index","border","PlayArea","ref","tabIndex","HeaderContainer","PointScreenContainer","Header","GameContainer","cursorVisible","css","ContainerStartOrReplay","dialog","props","open","TitleModal","h1","DescriptionModal","p","BtnStart","button","BtnReplay","StartOrReplay","onClick","MobileControlsContainer","DPadContainer","BtnTOP","BtnLEFT","BtnRIGHT","BtnBOTTOM","MobileControls","Game","role","onKeyUp","e","code","onKeyDown","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a134c7a.chunk.js","sourcesContent":["enum DirectionToGo {\n    TOP = 1,\n    BOTTOM = 2,\n    LEFT = 3,\n    RIGHT = 4,\n}\n\nexport default DirectionToGo;","const GAME_SETTINGS = {\n    gameResolution:{\n        width: 350,\n        height: 350,\n        squareArea: 12.5\n    },\n    speed: {\n        initial: 300,\n        minSpeed: 100,\n        speedDecay: 15 \n    }\n};\n\nexport default GAME_SETTINGS;","import React, { createContext, useState, useEffect, useRef } from \"react\";\nimport GAME_SETTINGS from \"../../config/gameSettings\";\nimport DirectionToGo from \"../../DirectionToGo\";\n\ninterface StartingPosition {\n  top: number;\n  left: number;\n}\n\nconst { width, height, squareArea } = GAME_SETTINGS.gameResolution;\n\nconst createInitalSnake = () => {\n  const { height, width, squareArea } = GAME_SETTINGS.gameResolution;  \n  const top = Math.floor(Math.floor(height/squareArea)/2) * squareArea;\n  const left = Math.floor(Math.floor(width/squareArea)/2) * squareArea;\n\n  let snake: StartingPosition[] = [];\n\n  for(let i = 0; i < 3; i++){\n    snake.push({top, left: left + (squareArea * i)});\n  }\n\n  return snake;\n};\n\nconst getRandomPosition = ():StartingPosition => {\n  let left = getRandomInt(0, width/squareArea) * squareArea;\n  let top = getRandomInt(0, height/squareArea) * squareArea;\n  \n  if(left === width)\n      left = left - squareArea;\n  if(top === height)\n      top = top - squareArea;\n  \n  return { left, top};\n};\n\nconst getRandomInt = (min: number, max: number) => {   \n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ntype GameType = {\n  fruit: StartingPosition;\n  snake: StartingPosition[];\n  pontuation: number;\n  moveDirection: DirectionToGo;\n  isGameOver: boolean;\n  msgStart: boolean;\n};\n\ntype PropsGameContext = {\n  playingField?: any;\n  state: GameType;\n  setState: React.Dispatch<React.SetStateAction<GameType>>;\n  start: () => void;\n  changeDirection: (newDirection: DirectionToGo) => void;\n};\nconst DEFAULT_VALUE = {\n  state: {\n    fruit: getRandomPosition(),\n    pontuation: 0,\n    moveDirection: DirectionToGo.RIGHT,\n    snake: createInitalSnake(),\n  } as GameType,\n  setState: () => {},\n  start: () => {},\n  changeDirection: (newDirection: DirectionToGo) => {},\n  isGameOver: false,\n  msgStart: true,\n};\nconst GameContext = createContext<PropsGameContext>(DEFAULT_VALUE);\nconst GameContextProvider: React.FC = ({ children }) => {\n  const playingField = useRef(null);\n  const [state, setState] = useState(DEFAULT_VALUE.state);\n  const [currentIntervalId, setCurrentIntervalId] = useState<NodeJS.Timeout>();\n  const [isStart, setIsStart] = useState(false);\n  const [speedSeconds, setSpeedSeconds] = useState(GAME_SETTINGS.speed.initial);\n\n  const useInitialfocus = (ref: any) => {\n    ref.current.focus();\n  };\n\n  const start = () => {\n    if (currentIntervalId !== undefined) clearInterval(currentIntervalId);\n    setState({\n      ...state,\n      fruit: getRandomPosition(),\n      snake: createInitalSnake(),\n      moveDirection: DirectionToGo.RIGHT,\n      pontuation: 0,\n      isGameOver: false,\n      msgStart: false,\n    });\n    setSpeedSeconds(GAME_SETTINGS.speed.initial);\n    setIsStart(true);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useInitialfocus(playingField);\n  };\n\n  const gameOver = () => {\n    setIsStart(false);\n    setState({\n      ...state,\n      msgStart: false,\n      isGameOver: true,\n    });\n\n    if (currentIntervalId !== undefined) clearInterval(currentIntervalId);\n  };\n\n  const moveSnake = (removeLastNode = true) => {\n    let newSnake = state.snake;\n    const { squareArea } = GAME_SETTINGS.gameResolution;\n\n    const currentSnakeHead = newSnake[newSnake.length - 1];\n    switch (state.moveDirection) {\n      case DirectionToGo.RIGHT: {\n        if (removeLastNode) newSnake.shift();\n        newSnake.push({\n          top: currentSnakeHead.top,\n          left: currentSnakeHead.left + squareArea,\n        });\n        break;\n      }\n      case DirectionToGo.LEFT: {\n        if (removeLastNode) newSnake.shift();\n        newSnake.push({\n          top: currentSnakeHead.top,\n          left: currentSnakeHead.left - squareArea,\n        });\n        break;\n      }\n      case DirectionToGo.TOP: {\n        if (removeLastNode) newSnake.shift();\n        newSnake.push({\n          top: currentSnakeHead.top - squareArea,\n          left: currentSnakeHead.left,\n        });\n        break;\n      }\n      case DirectionToGo.BOTTOM: {\n        if (removeLastNode) newSnake.shift();\n        newSnake.push({\n          top: currentSnakeHead.top + squareArea,\n          left: currentSnakeHead.left,\n        });\n        break;\n      }\n    }\n    setState({\n      ...state,\n      snake: newSnake,\n    });\n  };\n\n  const changeDirection = (newDirection: DirectionToGo) => {\n    if (\n      state.moveDirection === DirectionToGo.RIGHT &&\n      newDirection === DirectionToGo.LEFT\n    )\n      return;\n    if (\n      state.moveDirection === DirectionToGo.LEFT &&\n      newDirection === DirectionToGo.RIGHT\n    )\n      return;\n    if (\n      state.moveDirection === DirectionToGo.TOP &&\n      newDirection === DirectionToGo.BOTTOM\n    )\n      return;\n    if (\n      state.moveDirection === DirectionToGo.BOTTOM &&\n      newDirection === DirectionToGo.TOP\n    )\n      return;\n\n    setState({\n      ...state,\n      moveDirection: newDirection,\n    });\n  };\n\n  const checkSnakeCollidedWithItself = () => {\n    const currentSnakeHead = state.snake[state.snake.length - 1];\n    if (currentSnakeHead) {\n      const { left, top } = currentSnakeHead;\n      if (\n        state.snake.filter((item) => item.left === left && item.top === top)\n          .length > 1\n      ) {\n        gameOver();\n      }\n    }\n  };\n\n  const checkSnakeCollidedWithBorders = () => {\n    const currentSnakeHead = state.snake[state.snake.length - 1];\n    const { width, height, squareArea } = GAME_SETTINGS.gameResolution;\n    if (currentSnakeHead) {\n      if (\n        currentSnakeHead.left < 0 ||\n        currentSnakeHead.left > width - squareArea\n      ) {\n        gameOver();\n      }\n      if (\n        currentSnakeHead.top < 0 ||\n        currentSnakeHead.top > height - squareArea\n      ) {\n        gameOver();\n      }\n    }\n  };\n\n  const verifyColision = () => {\n    checkSnakeCollidedWithBorders();\n    checkSnakeCollidedWithItself();\n  };\n\n  const verifyFruit = () => {\n    const currentSnakeHead = state.snake[state.snake.length - 1];\n    if (\n      currentSnakeHead.top === state.fruit.top &&\n      currentSnakeHead.left === state.fruit.left\n    )\n      toEatFruit();\n  };\n\n  const toEatFruit = () => {\n    moveSnake(false);\n    changeSpeed();\n    setState({\n      ...state,\n      fruit: getRandomPosition(),\n      pontuation: state.pontuation + 1,\n    });\n  };\n  const changeSpeed = () => {\n    const { minSpeed, speedDecay } = GAME_SETTINGS.speed;\n    if (speedSeconds > minSpeed) setSpeedSeconds(speedSeconds - speedDecay);\n  };\n\n  useEffect(() => {\n    if (isStart) {\n      if (currentIntervalId !== undefined) clearInterval(currentIntervalId);\n      moveSnake();\n      const intervalId = setInterval(() => moveSnake(), speedSeconds);\n      setCurrentIntervalId(intervalId);\n    }\n  }, [state.moveDirection, isStart, state.fruit]);\n\n  useEffect(() => {\n    verifyColision();\n    verifyFruit();\n  }, [JSON.stringify(state.snake)]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        playingField,\n        state,\n        setState,\n        start,\n        changeDirection,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\nexport { GameContextProvider };\nexport default GameContext;\n","import React from \"react\";\n\nimport { GameContextProvider } from \"./GameContext/context\";\n\nconst GlobalContext: React.FC = ({ children }) => {\n  return (\n      <GameContextProvider>{children}</GameContextProvider>\n  );\n};\n\nexport default GlobalContext;\n","import styled from 'styled-components';\n\nexport const PlayAreaContainer = styled.section`\n    overflow: hidden;\n    display: flex;\n    position: relative;\n\n    &:focus {\n        outline: none;\n    }\n    &:active {\n        cursor: wait;\n    }\n`;","import styled from \"styled-components\";\n\nexport const SquareDesign = styled.div`\n    background: #000;\n    top: 0px;\n    left: 0px;\n    box-sizing: border-box;\n    position: absolute;\n`;","import React from 'react';\nimport GAME_SETTINGS from '../../helpers/config/gameSettings';\nimport * as S from './styles';\nconst { squareArea } = GAME_SETTINGS.gameResolution;\n\ninterface SquareTypes {\n    style?: React.CSSProperties;\n}\n\nconst Square: React.FC<SquareTypes> = ({ style }) => {\n    return <S.SquareDesign style={{...style, width: squareArea, height: squareArea}}/>\n};\n\nexport default Square;","import React, { useContext } from 'react';\nimport Square from '../Square';\nimport GameContext from \"../../helpers/context/GameContext/context\";\n\nconst Fruit = () => {\n\n    const { state } = useContext(GameContext);\n    const { top, left } = state.fruit;\n    \n    return (\n        <Square style={{top, left, background: '#fa0800', borderRadius: '20px'}} />\n    )\n};\n\nexport default Fruit;","import React, { useContext } from 'react';\nimport Square from '../Square';\nimport GameContext from \"../../helpers/context/GameContext/context\";\n\nconst Snake = () => {\n    const { state } = useContext(GameContext);\n    \n    return (\n        <>\n            {state.snake.map(({top, left}, index)=>(\n                <Square key={'snake_'+index} style={{top, left, border:'1px solid #ddd'}}/>\n            ))}\n        </>\n    );\n};\n\nexport default Snake;","import React, { useContext } from \"react\";\nimport GameContext from \"../../helpers/context/GameContext/context\";\nimport * as S from \"./styles\";\nimport Fruit from \"../Fruit\";\nimport Snake from \"../Snake\";\nimport GAME_SETTINGS from \"../../helpers/config/gameSettings\";\n\nconst PlayArea = () => {\n\n  const { playingField } = useContext(GameContext);\n  const { width, height } = GAME_SETTINGS.gameResolution;\n  return (\n    <S.PlayAreaContainer ref={playingField} tabIndex={-1} style={{ width, height }}>\n      <Fruit />\n      <Snake />\n    </S.PlayAreaContainer>\n  );\n};\n\nexport default PlayArea;\n","import styled from \"styled-components\";\n\nexport const HeaderContainer = styled.div`\n  border-bottom: 4px solid #000;\n  width: 100%;\n  padding: 20px;\n  box-sizing: border-box;\n  color: white;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  h1 {\n    margin: 0;\n    padding: 0;\n  }\n\n  div {\n  }\n\n  @media (max-width: 1024px) {\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    h1 {\n      font-size: 1.2rem;\n    }\n    div {\n      justify-content: flex-end;\n      button {\n        display: none;\n      }\n    }\n  }\n`;\n\nexport const PointScreenContainer = styled.div`\nfont-weight: bold;\n    @media (max-width: 1024px) {\n        font-size: .7rem;\n    }\n`;","import React, { useContext } from 'react';\nimport GameContext from \"../../helpers/context/GameContext/context\";\nimport * as S from './styles';\n\nconst Header: React.FC = () => {\n    const { state } = useContext(GameContext);\n\n    return(\n        <S.HeaderContainer>\n            <h1>Snake Game</h1>\n           \n            <S.PointScreenContainer>\n            Score: {state.pontuation} \n        </S.PointScreenContainer>\n           \n        </S.HeaderContainer>\n    );\n};\n\nexport default Header;","import styled, { css } from \"styled-components\";\n\ninterface CursorType {\n  cursorVisible: boolean;\n}\n\nexport const GameContainer = styled.section<CursorType>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 5% auto;\n  border: 2px solid #000;\n  padding: 0;\n  background-image: url(\"img/background.jpg\");\n\n  &:focus {\n    outline: none;\n  }\n\n  @media (max-width: 1024px) {\n    margin-top: 4px;\n    margin: 1% auto;\n  }\n\n  ${({ cursorVisible }) =>\n    cursorVisible || cursorVisible === undefined\n      ? css`\n          cursor: url(\"img/Cursor2.png\"), default;\n        `\n      : css`\n          cursor: none;\n        `};\n`;\n","import styled from \"styled-components\";\n\ninterface OpenDialogType {\n  open: boolean;\n}\n\nexport const ContainerStartOrReplay = styled.dialog<OpenDialogType>`\n    display: ${(props) => props.open ? \"flex\" : \"none\"} ;\n    flex-direction: column;\n    align-content: center;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n`;\n\nexport const TitleModal = styled.h1`\nfont-weight: bold;\n`;\n\nexport const DescriptionModal = styled.p`\n\n`;\n\nexport const BtnStart = styled.button`\n  cursor: pointer;\n  height: 77px;\n  width: 77px;\n  background-image: url(\"img/Start.jpg\");\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n\n  @media (max-width: 1024px) {\n    font-size: 0.8rem;\n    border-width: 3px;\n    padding: 4px 8px;\n  }\n  &:active {\n        opacity: 0.2;\n        cursor: wait;\n    }\n`;\n\nexport const BtnReplay = styled.button`\n  cursor: pointer;\n  height: 71px;\n  width: 72px;\n  background-image: url(\"img/Replay.jpg\");\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n\n  @media (max-width: 1024px) {\n    font-size: 0.8rem;\n    border-width: 3px;\n    padding: 4px 8px;\n  }\n  &:active {\n        opacity: 0.2;\n        cursor: wait;\n    }\n`;\n","import React, { useContext } from \"react\";\nimport GameContext from \"../../helpers/context/GameContext/context\";\nimport * as S from \"./style\";\n\nconst StartOrReplay = () => {\n  const { state, start } = useContext(GameContext);\n\n  return (\n    <S.ContainerStartOrReplay\n      open={\n        state.isGameOver || state.msgStart || state.msgStart === undefined\n          ? true\n          : false\n      }\n    >\n      {state.isGameOver && (\n        <>\n          <S.TitleModal>GAME OVER</S.TitleModal>\n          <S.DescriptionModal>\n            Your score: {state.pontuation}\n          </S.DescriptionModal>\n          <S.BtnReplay onClick={start} />\n        </>\n      )}\n\n      {state.msgStart ||\n        (state.msgStart === undefined && (\n          <>\n            <S.TitleModal>Hello, let's play?</S.TitleModal>\n            <p>Go press start</p>\n            <S.BtnStart onClick={start} />\n          </>\n        ))}\n    </S.ContainerStartOrReplay>\n  );\n};\n\nexport default StartOrReplay;\n","import styled from \"styled-components\";\n\nexport const MobileControlsContainer = styled.div`\n  position: relative;\n  padding: 20px;\n  display: none;\n  @media (max-width: 1024px) {\n    display: block;\n  }\n`;\n\nexport const DPadContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  div {\n    display: flex;\n    gap: 20px;\n  }\n`;\n\n\nexport const BtnTOP = styled.button`\n  cursor: pointer;\n  height: 60px;\n  width: 60px;\n  background-image: url('img/BtnTop.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n  position: relative;\n    top: 15px;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n  &:active {\n    opacity: 0.2;\n  }\n`;\n\nexport const BtnLEFT = styled.button`\n  cursor: pointer;\n  height: 60px;\n  width: 60px;\n  background-image: url('img/BtnLeft.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n  &:active {\n    opacity: 0.2;\n  }\n\n`;\n\n\nexport const BtnRIGHT = styled.button`\n  cursor: pointer;\n  height: 50px;\n  width: 60px;\n  background-image: url('img/BtnRight.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n  &:active {\n    opacity: 0.2;\n  }\n`;\n\nexport const BtnBOTTOM = styled.button`\n  cursor: pointer;\n  height: 60px;\n  width: 60px;\n  background-image: url('img/BtnBottom.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n  position: relative;\n    bottom: 20px;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n  &:active {\n    opacity: 0.2;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport DirectionToGo from \"../../helpers/DirectionToGo\";\nimport GameContext from \"../../helpers/context/GameContext/context\";\nimport * as S from \"./styles\";\n\nconst MobileControls = () => {\n  const { changeDirection } = useContext(GameContext);\n  return (\n    <S.MobileControlsContainer>\n      <S.DPadContainer>\n        <S.BtnTOP\n          onClick={() => changeDirection(DirectionToGo.TOP)}\n        ></S.BtnTOP>\n        <div>\n          <S.BtnLEFT onClick={() => changeDirection(DirectionToGo.LEFT)}>\n           \n          </S.BtnLEFT>\n          <S.BtnRIGHT\n            onClick={() => changeDirection(DirectionToGo.RIGHT)}\n          ></S.BtnRIGHT>\n        </div>\n        <S.BtnBOTTOM\n          onClick={() => changeDirection(DirectionToGo.BOTTOM)}\n        ></S.BtnBOTTOM>\n      </S.DPadContainer>\n    </S.MobileControlsContainer>\n  );\n};\n\nexport default MobileControls;\n","import React, { KeyboardEvent, useContext } from \"react\";\nimport PlayArea from \"../../PlayArea\";\nimport Header from \"../../Header\";\nimport { GameContainer } from \"./styles\";\nimport GameContext from \"../../../helpers/context/GameContext/context\";\nimport DirectionToGo from \"../../../helpers/DirectionToGo\";\nimport GAME_SETTINGS from \"../../../helpers/config/gameSettings\";\nimport StartOrReplay from \"../../StartOrReplay\";\nimport MobileControls from \"../../MobileControls\";\n\nconst Game = () => {\n  const { width } = GAME_SETTINGS.gameResolution;\n  const { changeDirection, state } = useContext(GameContext);\n\n  const handleGame = (e: KeyboardEvent) => {\n    switch (e.code) {\n      case \"KeyS\":\n      case \"ArrowDown\": {\n        changeDirection(DirectionToGo.BOTTOM);\n        break;\n      }\n\n      case \"KeyW\":\n      case \"ArrowUp\": {\n        changeDirection(DirectionToGo.TOP);\n        break;\n      }\n\n      case \"KeyD\":\n      case \"ArrowRight\": {\n        changeDirection(DirectionToGo.RIGHT);\n        break;\n      }\n\n      case \"KeyA\":\n      case \"ArrowLeft\": {\n        changeDirection(DirectionToGo.LEFT);\n        break;\n      }\n    }\n  };\n\n  return (\n    <>\n      <GameContainer\n        cursorVisible={state.isGameOver}\n        role=\"button\"\n        tabIndex={0}\n        onKeyUp={handleGame}\n        onKeyDown={() => {}}\n        style={{ width }}\n      >\n        <Header />\n        <PlayArea />\n        <StartOrReplay />\n      </GameContainer>\n      <MobileControls />\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport GlobalContext from \"./helpers/context/index\";\nimport Game from './components/template/Game';\n\nfunction App() {\n  return (\n    <GlobalContext>\n      <Game/>  \n    </GlobalContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}